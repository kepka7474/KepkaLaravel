<?php
class City4 {
    public $name;
    public $foundation;
    public $population;
    public function __construct($name, $foundation, $population)
    {
        $this->name = $name;
        $this->foundation = $foundation;
        $this->population = $population;
    }

}

$cit = new City4('Troitck', '19.04.1900', 200000);
$prop1 = ['name', 'foundation', 'population'];
$prop2 = 'name';
echo $cit->{$prop1[0]};
foreach ($prop1 as $elem) {
    echo $cit->$elem;
}

?><br>
<?php
$methods = ['method1' => 'getName', 'method2' => 'getAge'];
class User234
{
    private $name;
    private $age;

    public function __construct($name, $age)
    {
        $this->name = $name;
        $this->age = $age;
    }

    public function getName()
    {
        return $this->name;
    }

    public function getAge()
    {
        return $this->age;
    }
}
$user = new User234('A',12);
$method = 'getName';
echo $user->{$methods['method2']}();
?><br>
<?php
class User100
{
    protected $name;
    protected $age;

    public function getName()
    {

        return $this->name;
    }

    public function setName($name)
    {
        if (strlen($name)>1) {
            $this->name = $name;
        }
    }

    public function getAge()
    {
        return $this->age;
    }

    public function setAge($age)
    {
        if ($age>=18) {
            $this->age = $age;
        }
    }
}
?><br>
<?php
class Student100 extends User100
{
    private $course;

    public function setName($name)
    {
        if (strlen($name)<15)
        parent::setName($name); // TODO: Change the autogenerated stub
    }

    public function setAge($age)
    {
        if ($age<=25) {
            parent::setAge($age); // TODO: Change the autogenerated stub
        }
    }

    public function addOneYear() {
        $this->age++;
    }
    public function getCourse() {
        echo $this->course;
    }
    public function setCourse($course) {
        $this->course++;
    }
}
$sanya = new Student100;
$sanya->setName('Sanya');
echo $sanya->getName();
$sanya->setAge(90);
echo $sanya->getAge();
$sanya->addOneYear();
echo $sanya->getAge();


?><br>

<?php
class User101
{
    protected $name;
    protected $surname;
    protected $birthday = '2000-12-31';
    protected $age;
    public function __construct($name, $surname)
    {
        $this->name = $name;
        $this->surname = $surname;

    }
    public function getName()
    {
        return $this->name;
    }
    public function getSurname()
    {
        return $this->surname;
    }
    public function getBirthday()
    {
        return $this->birthday;
    }
    public function getAge()
    {
        return$this->age;
    }
    public function calculateAge() {
        $user_age = (time() - strtotime($this->birthday))/31536000;
        $this->age = intval($user_age);

    }
}
$usar = new User101('Gosha','Rohov');
$usar->calculateAge();
echo $usar->getAge()
?><br>

<?php
class Employeer100 extends User101
{
    public $ghot;
    private $salary;

    public function __construct($name, $surname, $salary)
    {
        parent::__construct($name, $surname);
        $this->salary = $salary;
    }

    public function getSalary()
    {
        return $this->salary;
    }
}
$epm2332 = new Employeer100('Fox', 'Gotov',250);
$test = $epm2332;
$test->ghot = 'go';
echo $epm2332->ghot . '<br>';
$epm2332->ghot = 'meeeee';
echo $test->ghot;

?><br>
<?php
class Arr100
{
    private $nums = [];
    private $sumHelper;
    private $avgHelper;

    public function __construct()
    {
        $this->sumHelper = new SumHelper;
        $this->avgHelper  = new AvgHelper;
    }

    public function add($num)
    {
        $this->nums[] = $num;
    }
    public function getSum23()
    {
        return $this->sumHelper->getSum2($this->nums) + $this->sumHelper->getSum3($this->nums);
    }
    public function getAvg()
    {
        return $this->avgHelper->getAvg($this->nums) + $this->avgHelper->getMeanSquare($this->nums);
    }
}
?>
<?php
class SumHelper
{
    // Сумма квадратов:
    public function getSum2($arr)
    {
        return $this->getSum($arr, 2);
    }

    // Сумма кубов:
    public function getSum3($arr)
    {
        return $this->getSum($arr, 3);
    }

    // Вспомогательная функция для нахождения суммы:
    private function getSum($arr, $power) {
        $sum = 0;

        foreach ($arr as $elem) {
            $sum += pow($elem, $power);
        }

        return $sum;
    }
}
?>
<?php
class AvgHelper
{
    public function getAvg($arr)
    {
        return array_sum($arr) / count($arr);
    }

    public function getMeanSquare($arr)
    {
        return sqrt($this->getAvg($arr));
    }
}
?><br>
<?php
$arre = new Arr100();
$arre->add(2);
$arre->add(3);
$arre->add(4);
echo intval($arre->getAvg());
?>
<?php
class Product
{
    private $name;
    private $price;
    private $quantity;
    public function __construct($name, $price, $quantity)
    {
        $this->name = $name;
        $this->price = $price;
        $this->quantity = $quantity;
    }

    public function getName()
    {
        return $this->name;
    }
    public function getPrice()
    {
        return $this->price;
    }
    public function getQuality()
    {
        return $this->quantity;
    }
    public function getCoast()
    {
        return $this->price*$this->quantity;
    }
}
?>
<?php
class Cart
{
    private $products= [];

    public function getProducts()
    {
        return $this->products;
    }

    public function add($product)
    {
        $this->products[] = $product;
    }
    public function remove($product_value)
    {
       $key = array_search($product_value, $this->products);
       array_slice($this->products, $key, 1);
    }
    public function getTotalCost()
    {
        $quant = 0;
        foreach ($this->products as $product)
        {
            $quant += $product->getQuality();
        }
        return $quant;
    }

    public function getAvgPrice()
    {
        $sum_price = 0;
        foreach ($this->products as $product)
        {
            $sum_price += $product->getPrice();
        }
        return $sum_price / $this->getTotalCost();
    }

}
?><br>
<?php
$card = new Cart;
$product1 = new Product('milk', 120, 5);
$product2 = new Product('apricot', 90, 15);
$product3 = new Product('salt', 12, 1);
$product4 = new Product('fish', 1200, 2);
$product5 = new Product('sugar', 89, 4);
$card->add($product1);
$card->add($product2);
$card->add($product3);
$card->add($product4);
$card->add($product5);
echo 'avg' . $card->getAvgPrice();
echo 'total' . $card->getTotalCost();
foreach ($card->getProducts() as $product)
{
    echo $product->getName() . '<br>';
}
?><br>
<?php
class User
{
    private $name;
    private $age;

    public function __construct($name, $age)
    {
        $this->name = $name;
        $this->age  = $age;
    }

    public function getName()
    {
        return $this->name;
    }

    public function getAge()
    {
        return $this->age;
    }
}
?>
    Создадим два объекта нашего класса с одинаковыми значениями свойств и сравним созданные объекты:

<?php
$user1 = new User('john', 30);
$user2 = new User('john', 30);

var_dump($user1 == $user2); // выведет true
?><br>